---
title: Week 3 - Reflection on gSchool and SalesEngine
date: 2013-02-15 09:02 -07:00
tags: gschool, salesengine
---

SalesEngine started off on a fairly positive note. "Load some CSVs. Parse them." Oh, yeah, definitely. I've done this plenty of times. Pragmatic studio, EventReporter, no problem. Unfortunately, my team parsed the CSVs into an array of hashes - that's what we knew and was instinctual. It was only upon realizing that creating class methods would be impossible and we were misusing our object instances that we realized - time to start from square one and figure this out. The way objects from class instances interact, can be stored, and can employ their own methods is much more clear now. I'm still a little bit stumped about the logic of relationships in the project. It's just tricky to look at a problem, use logic backwards to arrive at the answer. Alright, this invoice item class needs to return the instance of an invoice. What column is that? Which two CSVs should I look at to build and appropriate test? Have I even setup my 'setup' correctly?

MiniTesting is definitely tricky. I'm at the point where about half the time I'm only writing the test because I've already written the method and just "need" to test it. It's hard to create a staging environment, honestly. It might have been a bit easier to understand assert_equal when I was expecting a printout. But now I have to go based soley on test's setup and parameters. Still feels a bit abstract, but I definitely understand the benefits. Plus, seeing all those colorful dots really lifts your spirits after an afternoon of EEEEE.

Working with a pair on this project is definitely an interesting experience. Because we obviously are each better at some things and worse at others, it's tricky to both power through a section. The first day, we tried out paired work - building tests, having them fail, and then handing them to our cohort. The second day, we built out github branches and worked on 3 classes each for our 'find' method. I believe that it's way more important to understand the code, the concepts, and the relationships, rather than just pounding out find method after find method. I believe that if my partner isn't understanding something and I do (or vis-versa), we shouldn't just leave it at that and hope we can just look back on the code and have it click. Because it's likely that one or both of us doesn't know what's going on, it's definitely taken longer than expected.

Beyond the project, after three weeks of developing, I still don't feel like a developer. I feel like I'm definitely understanding concepts and understanding the course work so far - I just feel like three weeks (no matter if they feel 'long') are not enough to qualify my person as an pro. Just because I can throw a baseball and am getting better doesn't make me the star pitcher (oh look at me. Making programming/real life comparisons. What have I become?) I'm, of course, very excited about the rest of the journey. I'm not horribly worried about "feeling" like a developer - I'm sure that will come with time. I'm excited about combining the Ruby backend with the pretty-er (show-pony, as Shane would say) side of the web. I'm excited to be at a level where I can say "oh, this would be cool", and just quickly hack away. I'm still at a level where I have to be completely focused to understand what I'm typing. I'm excited to expand my toolbox and be able to pull out any number of tools to solve a problem. As it stands, my toolbox is fairly barren - but as with my original "array of hashes" problem, I'm expanding the box every day.

The class environment has matched my expectations to a certain extent. This might sound sadistic - but I almost expected the difficultly level of the course to be harder. Not that it's not difficult - I was just expecting to be drowning without a life vest. Instead, I feel excited and uncomfortable at the same time, which is a way more positive experience. I have many resources around me in my classmates, who happily are around the same experience level and comfort level as me (for the most). After EventReporter, I told myself that I would use many more resources than last time, where I mostly relied on 3 classmates. Now, I'll generally ask whichever pair is around, the web, and the flow. Katrina has become an excellent, approachable mentor as well. I've also found it interesting recently that, when asking Jeff AND Katrina about a design or approach question, they will give me different answers. It's cool that we're on a project now where the same solution can stem from very different approaches. In any case, I expect the course to get harder. I expect SalesEngine to get harder. But with 3 weeks down, I'm feeling pretty positive about my growth so far. Haven't broken down in a puddle of tears. 

Yet.