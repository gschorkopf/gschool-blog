---
title: We Tube. Wet Ube? Wetube? And More Service-Oriented Design
date: 2013-06-14 14:28 -06:00
tags: service oriented design, we tube, job hunt
---

Group project work at gSchool is back (and better than ever!) In earnest, I did miss a group atmosphere. Though I felt like I was productive and self-motivated on my own for Eldoorado, I missed the pairing sessions and constant feedback on my code. I'm in a very relaxed group this time around, and as Jeff pointed out to us, there is no real loudmouth leader character. So we assigned two roles, a QA lead and a product management lead, and I think the group dynamic has thrived. This time around, we were tasked to build "WeTube", a group video watching app. The concept is "turntable.fm of video" -- essentially being able to watch YouTube bits with your pals and chat, add videos to a playlist, and favorite videos. 

As Eldoorado was fueled by service-oriented design (and not always the best practices), I came into the group with a better understanding of how to make API/gem management tick. We've already built out a few services, and have a god command to run all of them at once. Our first iteration of our gem is live on RubyGems, and we've made decent progress on the frontend. I think the real challenges will be converting everything to real time synchronization. We need to establish web sockets (either with Faye or Pusher) to make sure that, when a user clicks play in a room, everyone else in that room will be watching the video at roughly the same time. This raises quite a few questions: what's the best way to accomplish this task? What happens if someone enters the room mid-video stream? What user interface and controls would lead to the best overall experience?

The concept of services itself is pretty digestible. However, I still find it challenging figuring out how to build out an API. What should the request actually look like? If it's just us that are consuming it, does it really matter (so long as the tests are strong and the gem is easy to handle)? How should our gem respond to errors (e.g.: I use a .find method and nothing matches the parameters)? What kind of security is needed? The service-oriented design book by Paul Dix, while helpful, was difficult to contextualize in one reading. There are definitely many lingering questions that our team will have to address within the next two weeks.

On another note: we were also tasked with using vagrant, nginx, and a capistrano command to publish our app to production. Boy, I'm missing Heroku already.

This project will be our last group project, which is definitely a sad milestone. Many gSchoolers have started looking for jobs, and quite a few have interviewed. I'd say I'm somewhere in the middle to end of pack when it comes to actually putting pedal to metal on the job push. I already know I'd like to take a small break from the 70 hour gSchool week before jumping into my career, and intend to spend time with my family for a few weeks while I have the opportunity of unemployment. However, I have definitely shopped around for positions.

I've started to polish my technical resume, and Jeff has been gracious enough to open up a few opportunities in the Atlanta area (where I intend to move after the program's end, pending any big life changes). I'd ideally like to work at a consultancy, either as an apprentice or under the mentorship of an experienced dev. I'd like to continue my learning and employ use of the full stack (front end and back end). Companies like Big Nerd Ranch set the bar pretty high, but a company that practices multiple languages, focuses on Rails, implements TDD and pairing daily, are generally the type of company I'd like to work for. I recently updated my LinkedIn account (despite my loathing for their spammy nature), and have written out a <a href="http://blooming-crag-3664.herokuapp.com/students/geoffrey_schorkopf.html">small portfolio</a>. I'm tidying up my GitHub account and READMEs.

A few of the companies that have come to speak at gSchool - ThoughtBot, Pivotal Labs, and HashRocket - support the ideal workplace and post great qualities of their devs online: humility and passion, both for their co-workers/clients and their craft. I hope to portray myself as such to future employers, and am excited about the months to come. My biggest fear is not being able to find the "right" company of which to join the ranks. Hopefully that fear will be assuaged in coming months.